import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.model.native'

model {
    android {
        compileSdkVersion = 23

        sources {
            main {
                jni {
                    source {
                        srcDirs = [
                                './src/main/jni',
                                '../../../src/lcp-client-lib',
                                '../../../src/lcp-content-filter',
                                '../../../src/third-parties/time64'
                        ]
                    }
                    exportedHeaders {
                        srcDir "./src/main/jni"
                    }
                    dependencies {
                        project ":epub3"
                    }
                }
            }
        }

        ndk {
            moduleName = "lcp"

            stl = "gnustl_shared"

            cppFlags.addAll([
                    "-std=gnu++11",
                    "-fpermissive",
                    "-fexceptions",
                    "-frtti",
                    "-fpic",
                    "-DFEATURES_READIUM",
                    "-I" + project(':epub3').projectDir +  "/include",
                    "-I${file("../../../src/lcp-client-lib")}".toString(),
                    "-I${file("../../../src/lcp-client-lib/public")}".toString(),
                    "-I${file("../../../src/lcp-content-filter")}".toString(),
                    "-I${file("../../../src/lcp-content-filter/public")}".toString(),
                    "-I${file("../../../src/third-parties")}".toString()
            ])
            ldLibs.addAll(['z', 'android', 'log', 'cryptopp', 'ziplib'])
        }

        buildTypes {
            release {

            }
            debug {
                ndk.with {
                    debuggable = true
                }
            }
        }

        productFlavors {
            create("arm") {
                ndk.with {
                    abiFilters.add("armeabi-v7a")
                    ldFlags.addAll([
                            "-L${file("./obj/local/armeabi-v7a")}".toString()
                    ])
                }
            }
            create("x86") {
                ndk.with {
                    abiFilters.add("x86")
                    ldFlags.addAll([
                            "-L${file("./obj/local/x86")}".toString()
                    ])
                }
            }
        }
    }
}

task buildMk(type: Exec) {
    // Retrieve ndk dir
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir', null)

    // Call ndk build
    def ndkBuildExt = Os.isFamily(Os.FAMILY_WINDOWS) ? ".cmd" : ""
    commandLine "$ndkDir/ndk-build${ndkBuildExt}",
            '-C', file('.').absolutePath,
            'NDK_APPLICATION_MK=Application.mk',
            'APP_BUILD_SCRIPT=Android.mk',
            'NDK_PROJECT_PATH=.'
}

tasks.whenTaskAdded { task ->
    def taskName = task.name

    if (taskName.startsWith("compile")) {
        task.dependsOn "buildMk"
    }
}