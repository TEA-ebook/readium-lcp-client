
apply plugin: 'com.android.model.native'

def ndk_skipX86 = (rootProject.hasProperty("readium_ndk_skipX86") && rootProject.readium_ndk_skipX86)
def ndk_skipARM = (rootProject.hasProperty("readium_ndk_skipARM") && rootProject.readium_ndk_skipARM)
def ndk_clang = (rootProject.hasProperty("readium_ndk_clang") && rootProject.readium_ndk_clang)
def ndk_debug = (rootProject.hasProperty("readium_ndk_debug") && rootProject.readium_ndk_debug)

model {
    android {
        compileSdkVersion = 24

        sources {
            main {
                jni {
                    source {
                        srcDirs = [
                                './src/main/jni',
                                '../../../src/lcp-client-lib',
                                '../../../src/lcp-content-filter',
                                '../../../src/third-parties/time64'
                        ]
                    }
                    exportedHeaders {
                        srcDir "./src/main/jni"
                    }
                    dependencies {
                        project ":epub3"
                    }
                }
            }
        }

        ndk {
            moduleName = "lcp"

            toolchain = ndk_clang ? "clang" : "gcc"
            stl = ndk_clang ? "c++_shared" : "gnustl_shared"

            cppFlags.addAll([
                    "-std=gnu++11",
                    "-fpermissive",
                    "-fexceptions",
                    "-frtti",
                    "-fpic",
                    "-DFEATURES_READIUM",
                    "-DDISABLE_LSD_",
                    ndk_clang ? "-D_LIBCPP_INLINE_VISIBILITY_EXCEPT_GCC49=_LIBCPP_INLINE_VISIBILITY" : "-DREADIUM_GCC",
                    "-I" + project(':epub3').projectDir +  "/include",
                    "-I${file("../../../src/lcp-client-lib")}".toString(),
                    "-I${file("../../../src/lcp-client-lib/public")}".toString(),
                    "-I${file("../../../src/lcp-content-filter")}".toString(),
                    "-I${file("../../../src/lcp-content-filter/public")}".toString(),
                    "-I${file("../../../src/third-parties")}".toString()
            ])
            ldLibs.addAll(['z', 'android', 'log', 'cryptopp', 'ziplib'])
        }

        buildTypes {
            release {

            }
            debug {
                ndk.with {
                    debuggable = true
                }
            }
        }

        productFlavors {
            create("arm") {
                ndk.with {
                    abiFilters.add("armeabi-v7a")
                    ldFlags.addAll([
                            "-L${file("./obj/local/armeabi-v7a")}".toString()
                    ])
                }
            }
            if (!ndk_skipX86)
            create("x86") {
                ndk.with {
                    abiFilters.add("x86")
                    ldFlags.addAll([
                            "-L${file("./obj/local/x86")}".toString()
                    ])
                }
            }
        }
    }
}